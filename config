#!/bin/bash
# this script sets user specific configurations, configures packages and their services, then reboots (run as root)










# check root status
###################

currentUser=$(whoami)
if [ "$currentUser" != root ]
then
    echo -e "\nYou must be logged in as root to run this script\n"
    exit
elif [ "$currentUser" == root ]
then
    sleep 1
fi










# get user input
################

# should the system check for other operating systems?
while true
do
read -rp $'\n'"Would you like the bootloader to check for other operating systems? [Y/n] " dualBoot
    dualBoot=${dualBoot:-Y}
if [ "$dualBoot" == Y ] || [ "$dualBoot" == y ] || [ "$dualBoot" == yes ] || [ "$dualBoot" == YES ] || [ "$dualBoot" == Yes ]
then
    read -rp $'\n'"Are you sure you want the bootloader to check for other operating systems? [Y/n] " dualbootConfirm
        dualbootConfirm=${dualbootConfirm:-Y}
        case $dualbootConfirm in
            [yY][eE][sS]|[yY]) break;;
            [nN][oO]|[nN]);;
            *);;
        esac
        REPLY=
else
   read -rp $'\n'"Are you sure you DO NOT want the bootloader to check for other operating systems? [Y/n] " dualbootConfirm
        dualbootConfirm=${dualbootConfirm:-Y}
        case $dualbootConfirm in
            [yY][eE][sS]|[yY]) break;;
            [nN][oO]|[nN]);;
            *);;
        esac
        REPLY=
fi
done


# get reflector country
mapfile -t reflectorCountries < <(reflector --list-countries)
PS3="Enter the number for the country you want to download packages from: "
select reflectorCountry in "${reflectorCountries[@]}"
do
    if (( REPLY > 0 && REPLY <= "${#reflectorCountries[@]}" ))
    then
        read -rp $'\n'"Are you sure you want to select the country \"$reflectorCountry\"? [Y/n] " reflectorConfirm
        reflectorConfirm=${reflectorConfirm:-Y}
            case $reflectorConfirm in
                [yY][eE][sS]|[yY]) break;;
                [nN][oO]|[nN]);;
                *);;
            esac
            REPLY=
    else
        echo -e "\nInvalid option. Try another one\n"
        sleep 2
        REPLY=
    fi
done
reflectorCode=$(echo -e "$reflectorCountry" | grep -o '[A-Z][A-Z]')


# user input ended
echo -e "\nNo more user input needed\n"
sleep 5











# automatically get system information
######################################

echo -e "\nAutomatically getting system information\n"
sleep 2


# get username
echo -e "\nGetting username\n"
sleep 2
userName=$(users | awk '{print $1}')
echo -e "\nUsername set to \"$userName\"\n"
sleep 3


# get root partition
echo -e "\nGetting root partition path\n"
sleep 2
rootPartition=$(fdisk -l | grep -i "linux root" | awk '{print $1}')
echo -e "\nRoot partition path set to \"$rootPartition\"\n"
sleep 3


# get swap size
echo -e "\nGetting swap file size\n"
sleep 2
ramSize=$(free -k | grep -i mem | awk '{print $2}')
swapSize=$(echo -e ""$ramSize" * 1" | bc)
echo -e "\nSwap size is set to \""$swapSize" kB\"\n"
sleep 3


# get custom config
echo -e "\nDetermining if script should set the repo owner's custom configurations\n"
sleep 2
customConfig=$(ls /home/"$userName" | grep -io personal)
if [ "$customConfig" == personal ]
then
    customConfig=true
    echo -e "\nScript WILL set the repo owner's custom configurations\n"
    sleep 3
else
    customConfig=false
    echo -e "\nScript WILL NOT set the repo owner's custom configurations\n"
    sleep 3
fi


# done automatically getting system information
echo -e "\nDone getting system information\n"
sleep 5










# configure system
##################

# configure snapper
echo -e "\nConfiguring snapper\n"
sleep 2
umount /.snapshots
rm -r /.snapshots
snapper -c root create-config /
btrfs subvolume delete /.snapshots
mkdir /.snapshots
mount -a
chmod 750 /.snapshots
# still need to edit /etc/snapper/configs/root
systemctl enable snapper-timeline.timer
systemctl enable snapper-cleanup.timer
echo -e "\nDone\n"
sleep 2


# backup boot partition on kernel update
echo -e "\nBackup boot partition on kernel update\n"
sleep 2
mkdir /etc/pacman.d/hooks
cp /home/"$userName"/archbtrfs/files/95-bootbackup.hook /etc/pacman.d/hooks
# make sure the file is owned by root after copying
# see "system backup" page on the arch wiki
echo -e "\nDone\n"
sleep 2


# create a swap file
echo -e "\nCreating swap file\n"
sleep 2
btrfs subvolume create /@swapfile
mkdir /swapfile
chattr +C /swapfile
mount -o noatime,space_cache=v2,subvol=@swapfile "$rootPartition" /swapfile
dd if=/dev/zero of=/swapfile bs=1024 count="$swapSize" status=progress
# the above line sets the base size to 1 kB and creates a file with a size equal to bs multiplied by count in bytes
chmod 0600 /swapfile
mkswap -U clear /swapfile
swapon /swapfile
echo -e "\n# swap file" >> /etc/fstab
echo -e "/swapfile none swap defaults 0 0" >> /etc/fstab
# also need to add the @swapfile subvolume to fstab, and remove the discard,autodefrag options from the first subvolume in fstab
echo -e "\nDone\n"
sleep 2


# set swappiness
echo -e "\nSetting swappiness\n"
sleep 2
echo -e "vm.swappiness=1" > /etc/sysctl.d/99-swappiness.conf
echo -e "\nDone\n"
sleep 2


# configure reflector
echo -e "\nConfiguring reflector\n"
sleep 2
echo -e "--country $reflectorCode" >> /etc/xdg/reflector/reflector.conf
systemctl enable reflector.timer
echo -e "\nDone\n"
sleep 2


# enable fstrim
echo -e "\nEnabling fstrim\n"
sleep 2
systemctl enable fstrim.timer
echo -e "\nDone\n"
sleep 2


# configure paccache
echo -e "\nConfiguring paccache\n"
sleep 2
systemctl enable paccache.timer
echo -e "\nDone\n"
sleep 2


# configure GRUB
echo -e "\nConfiguring Grub\n"
sleep 2
sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=3/' /etc/default/grub
if [ "$dualBoot" == Y ] || [ "$dualBoot" == y ] || [ "$dualBoot" == yes ] || [ "$dualBoot" == YES ] || [ "$dualBoot" == Yes ]
then
  pacman -S --needed --noconfirm --asdeps os-prober
  sed -i 's/#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/' /etc/default/grub
fi
grub-mkconfig -o /boot/grub/grub.cfg
echo -e "\nDone\n"
sleep 2


# enable bluetooth
echo -e "\nEnabling Bluetooth\n"
sleep 2
systemctl enable bluetooth.service
sed -i 's/#AutoEnable=false/AutoEnable=false/' /etc/bluetooth/main.conf
echo -e "\nDone\n"
sleep 2


# configure cups
echo -e "\nConfiguring cups\n"
sleep 2
systemctl enable --now avahi-daemon.service
sed -i 's/mymachines/mymachines mdns_minimal [NOTFOUND=return]/' /etc/nsswitch.conf
systemctl enable cups.socket
echo -e "\nDone\n"
sleep 2


# configure plocate
echo -e "\nConfiguring plocate\n"
sleep 2
systemctl enable plocate-updatedb.timer
echo -e "\n#plocate" >> /home/"$userName"/.bashrc
echo -e "alias locate='plocate'" >> /home/"$userName"/.bashrc
echo -e "\nDone\n"
sleep 2










# set custom configurations
###########################

if [ "$customConfig" == true ]
then

# configure bash
echo -e "\nConfiguring bash\n"
sleep 2
#
echo -e "\n# colored bash prompt" >> /home/"$userName"/.bashrc
echo 'export PS1="\[\e[34m\][\[\e[m\]\[\e[32m\]\u\[\e[m\]\[\e[34m\]@\[\e[m\]\[\e[32m\]\h\[\e[m\] \[\e[31m\]\W\[\e[m\]\[\e[34m\]]\[\e[m\]\[\e[31m\]\\$\[\e[m\] "' >> /home/"$userName"/.bashrc
#
echo -e "\n# enables color" >> /home/"$userName"/.bashrc
echo -e "alias diff='diff --color=auto'" >> /home/"$userName"/.bashrc
echo -e "alias grep='grep --color=auto'" >> /home/"$userName"/.bashrc
echo -e "alias ip='ip -color=auto'" >> /home/"$userName"/.bashrc
echo -e "alias ls='ls --color=auto'" >> /home/"$userName"/.bashrc
echo -e "alias pactree='pactree --color'" >> /home/"$userName"/.bashrc
echo -e "alias sudo='sudo '" >> /home/"$userName"/.bashrc
echo -e "alias info='pinfo'" >> /home/"$userName"/.bashrc
echo "export LESS_TERMCAP_md=$'\e[1;32m'" >> /home/"$userName"/.bashrc
echo "export LESS_TERMCAP_me=$'\e[0m'" >> /home/"$userName"/.bashrc
echo "export LESS_TERMCAP_us=$'\e[1;4;34m'" >> /home/"$userName"/.bashrc
echo "export LESS_TERMCAP_ue=$'\e[0m'" >> /home/"$userName"/.bashrc
echo "export LESS_TERMCAP_so=$'\e[01;31m'" >> /home/"$userName"/.bashrc
echo "export LESS_TERMCAP_se=$'\e[0m'" >> /home/"$userName"/.bashrc
#
echo -e "\n# enables cd auto-correct" >> /home/"$userName"/.bashrc
echo -e "shopt -s cdspell" >> /home/"$userName"/.bashrc
#
echo -e "\n# rewrap text on window resize" >> /home/"$userName"/.bashrc
echo -e "shopt -s checkwinsize" >> /home/"$userName"/.bashrc
#
echo -e "#clears screen after logging out" >> /home/"$userName"/.bash_logout
echo -e "clear" >> /home/"$userName"/.bash_logout
echo -e "reset" >> /home/"$userName"/.bash_logout
#
echo -e "\nDone\n"
sleep 2


# configure pacman
echo -e "\nConfiguring pacman\n"
sleep 2
sed -i 's/#Color/Color\nILoveCandy/' /etc/pacman.conf
echo -e "\nDone\n"
sleep 2


# configure paru
echo -e "\nConfiguring paru\n"
sleep 2
sed -i 's/#BottomUp/BottomUp/' /etc/paru.conf
echo -e "\nDone\n"
sleep 2


# configure pinfo
echo -e "\nConfiguring pinfo\n"
sleep 2
sed -i 's/COL_MENU           = COLOR_BLUE   ,  COLOR_DEFAULT,  BOLD   ,  NO_BLINK/COL_MENU           = COLOR_GREEN  ,  COLOR_DEFAULT,  BOLD   ,  NO_BLINK/' /etc/pinforc
sed -i 's/COL_NOTE           = COLOR_GREEN  ,  COLOR_DEFAULT,  BOLD   ,  NO_BLINK/COL_NOTE           = COLOR_BLUE   ,  COLOR_DEFAULT,  BOLD   ,  NO_BLINK/' /etc/pinforc
sed -i 's/COL_TOPLINE        = COLOR_YELLOW ,  COLOR_BLUE   ,  BOLD   ,  NO_BLINK/COL_TOPLINE        = COLOR_BLACK  ,  COLOR_GREEN  ,  BOLD   ,  NO_BLINK/' /etc/pinforc
sed -i 's/COL_BOTTOMLINE     = COLOR_YELLOW ,  COLOR_BLUE   ,  BOLD   ,  NO_BLINK/COL_BOTTOMLINE     = COLOR_BLACK  ,  COLOR_GREEN  ,  BOLD   ,  NO_BLINK/' /etc/pinforc
sed -i 's/COL_URL            = COLOR_MAGENTA,  COLOR_DEFAULT,  BOLD   ,  NO_BLINK/COL_URL            = COLOR_BLUE   ,  COLOR_DEFAULT,  BOLD   ,  NO_BLINK/' /etc/pinforc
echo -e "\nDone\n"
sleep 2


# configure bat
echo -e "\nConfiguring bat\n"
sleep 2
su -c "bat --generate-config-file" "$userName"
echo -e "--theme=\"ansi\"" >> /home/"$userName"/.config/bat/config
echo -e "\nDone\n"
sleep 2


# configure jackett
echo -e "\nConfiguring jackett\n"
sleep 2
systemctl enable jackett
echo -e "\nDone\n"
sleep 2


# disable power saving mode for sound card
#echo -e "\nDisabling power saving mode for sound card\n"
#sleep 2
#sed -i 's/load-module module-suspend-on-idle/#load-module module-suspend-on-idle/' /etc/pulse/default.pa
#echo -e "\nDone\n"
#sleep 2


# configure RKHunter (rootkit hunter)
echo -e "\nConfiguring RKHunter\n"
sleep 2
rkhunter --propupd
echo -e "\nDone\n"
sleep 2


# configure clamav (antivirus)
echo -e "\nConfiguring ClamAV\n"
sleep 2
freshclam
systemctl enable clamav-freshclam
systemctl enable clamav-daemon
# echo -e "$rootPassword" | su -c "sudo -Su clamav /usr/bin/fangfrisch --conf /etc/fangfrisch/fangfrisch.conf initdb" "$userName"
# su -c "sudo -Su clamav /usr/bin/fangfrisch --conf /etc/fangfrisch/fangfrisch.conf initdb" "$userName"
sudo -Su clamav /usr/bin/fangfrisch --conf /etc/fangfrisch/fangfrisch.conf initdb
systemctl enable fangfrisch.timer
echo -e "\nDone\n"
sleep 2


# configure virtual machine manager (libvirt)
echo -e "\nConfiguring virtual machines\n"
sleep 2
systemctl enable libvirtd.service
echo -e "\nDone\n"
sleep 2


# configure dolphin
echo -e "\nCongfiguring Dolphin\n"
sleep 2
su -c "mkdir -p /home/"$userName"/.local/share/kxmlgui5/dolphin" "$userName"
su -c "cp /home/"$userName"/personal/plasma/dolphinui.rc /home/"$userName"/.local/share/kxmlgui5/dolphin" "$userName"
su -c "touch /home/"$userName"/.config/dolphinrc" "$userName"
echo -e "[General]\nRememberOpenedTabs=false" >> /home/"$userName"/.config/dolphinrc
su -c "mkdir -p /home/"$userName"/.local/share/dolphin/view_properties/global" "$userName"
su -c "touch /home/"$userName"/.local/share/dolphin/view_properties/global/.directory" "$userName"
echo -e "[Settings]\nHiddenFilesShown=true" >> /home/"$userName"/.local/share/dolphin/view_properties/global/.directory
su -c "touch /home/"$userName"/.config/ktrashrc" "$userName"
echo -e "[/home/$userName/.local/share/Trash]\nDays=14\nLimitReachedAction=0\nPercent=10\nUseSizeLimit=true\nUseTimeLimit=true" >> /home/"$userName"/.config/ktrashrc
# hide basic data partition
echo -e "\nDone\n"
sleep 2


# configure kde plasma
echo -e "\nConfiguring Plasma\n"
sleep 2
#
# config files
cp /home/"$userName"/personal/plasma/wallpaper.jpg /usr/share/wallpapers
su -c "cp /home/"$userName"/personal/plasma/mimeapps.list /home/"$userName"/.config" "$userName"
su -c "cp /home/"$userName"/personal/plasma/plasmanotifyrc /home/"$userName"/.config" "$userName"
su -c "cp /home/"$userName"/personal/plasma/plasma-org.kde.plasma.desktop-appletsrc /home/"$userName"/.config" "$userName"
sed -i 's/\[General\]/\[General\]\nBrowserApplication=chromium.desktop\nTerminalApplication=guake\nTerminalService=guake.desktop/' /home/"$userName"/.config/kdeglobals
#
# theme
sed -i 's/Adwaita/Breeze/' /usr/share/gtk-3.0/settings.ini
echo -e "gtk-application-prefer-dark-theme = true" >> /usr/share/gtk-3.0/settings.ini
sed -i 's/Adwaita/Breeze/' /usr/share/gtk-4.0/settings.ini
echo -e "gsettings set org.gnome.desktop.interface color-scheme prefer-dark" >> /usr/share/gtk-4.0/settings.ini
su -c "plasma-apply-lookandfeel --apply org.kde.breezedark.desktop" "$userName"
sed -i 's/\[General\]/\[General\]\nAccentColor=61,212,37/' /home/"$userName"/.config/kdeglobals
#
# wallpaper
# desktop wallpaper
su -c "touch /home/"$userName"/.config/plasmarc" "$userName"
echo -e "[Wallpapers]\nusersWallpapers=/usr/share/wallpapers/wallpaper.jpg" > /home/"$userName"/.config/plasmarc
# lock screen wallpaper
echo -e "\n[Greeter][Wallpaper][org.kde.image][General]\nImage=/usr/share/wallpapers/wallpaper.jpg" >> /home/"$userName"/.config/kscreenlockerrc
# sddm wallpaper
echo -e "[General]\nbackground=/usr/share/wallpapers/wallpaper.jpg" > /usr/share/sddm/themes/breeze/theme.conf.user
#
# colors based on wallpaper
pacman -S --needed --noconfirm python-pywal
su -c "wal -i /usr/share/wallpapers/wallpaper.jpg" "$userName"
echo -e "\n# Enables pywal theme on reboot" >> /home/"$userName"/.bashrc
echo -e "(cat ~/.cache/wal/sequences &)" >> /home/"$userName"/.bashrc
#
# indexer
echo -e "only basic indexing=true" >> /home/"$userName"/.config/baloofilerc
#
# autostart apps
#su -c "mkdir -p /home/"$userName"/.config/autostart" "$userName"
#su -c "cp /usr/share/applications/guake.desktop /home/"$userName"/.config/autostart" "$userName"
#chown -R "$userName":users /home/"$userName"/.config/autostart/guake.desktop
#
echo -e "\nDone\n"
sleep 2


# save config files to desktop
echo -e "\nSaving config files to desktop\n"
sleep 2
su -c "cp /home/"$userName"/personal/plasma/guake.config /home/"$userName"/Desktop" "$userName"
su -c "cp /home/"$userName"/personal/plasma/qbittorrent.txt /home/"$userName"/Desktop" "$userName"
su -c "cp /home/"$userName"/personal/plasma/system_monitor.page /home/"$userName"/Desktop" "$userName"
echo -e "\nDone\n"
sleep 2


# remove custom config files
echo -e "\nRemoving repo owner's custom config files\n"
sleep 2
rm -rf /home/"$userName"/personal
rm -rf /home/"$userName"/Desktop/packages.txt
echo -e "\nDone\n"
sleep 2

fi










# remove files, and reboot
############################

# remove files
echo -e "\nRemoving no longer needed files\n"
sleep 2
rm -rf /home/"$userName"/archbtrfs
echo -e "\nDone\n"
sleep 2


# reboot
echo -e "\nConfig complete. Enter "reboot" to reboot the system\n"
